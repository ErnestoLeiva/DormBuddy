@model Tuple<List<DormBuddy.Models.ExpenseModel>, DormBuddy.Models.ExpenseModel>

@{
    ViewData["Title"] = "Expense Splitting";
    var expenses = Model?.Item1 ?? new List<DormBuddy.Models.ExpenseModel>();
    var newExpense = Model?.Item2 ?? new DormBuddy.Models.ExpenseModel();

    // Calculate stats
    var totalExpenses = expenses.Sum(e => e.Amount);
    var averageExpense = expenses.Any() ? Math.Round(expenses.Average(e => e.Amount), 2) : 0;
    var pendingPayments = expenses.Count(e => e.SharedWith.Contains(",")) * averageExpense / 2; 
    var activeSplits = expenses.Count(e => e.SharedWith.Contains(","));
}

<div class="expenses-container">
    <!-- Return Button -->
    <a href="/Account/Dashboard" class="return-button">
        <i class="fa fa-chevron-left"></i> Return to Dashboard
    </a>
    <div class="settings-header">
        <h1>Expense Splitting</h1>
        <p>Track shared expenses and manage balance with dormmates</p>
    </div>
    <div class="expenses-layout">
        <div class="expenses-main">
            <!-- Stats Cards -->
            <div class="stats-container">
                <div class="stat-card stat-total">
                    <div class="stat-icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@totalExpenses.ToString("C")</h3>
                        <p class="stat-label">Total Expenses</p>
                    </div>
                </div>

                <div class="stat-card stat-share">
                    <div class="stat-icon">
                        <i class="fas fa-wallet"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@averageExpense.ToString("C")</h3>
                        <p class="stat-label">Average per Person</p>
                    </div>
                </div>

                <div class="stat-card stat-pending">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@pendingPayments.ToString("C")</h3>
                        <p class="stat-label">Pending Payments</p>
                    </div>
                </div>

                <div class="stat-card stat-splits">
                    <div class="stat-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-content">
                        <h3 class="stat-number">@activeSplits</h3>
                        <p class="stat-label">Active Splits</p>
                    </div>
                </div>
            </div>

            <!-- Messages Section -->
            @if (TempData["message"] != null)
            {
                <div class="alert alert-success">
                    @TempData["message"]
                </div>
            }
            @if (TempData["error"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["error"]
                </div>
            }

            <!-- Add Expense Form -->
            <div class="add-expense-section">
                <h4>Add New Expense</h4>
                <form method="post" asp-action="AddExpense" asp-controller="Expenses">
                    <input type="hidden" id="UserId" name="UserId" value="@newExpense.UserId" />
                    
                    <div class="form-group">
                        <label for="expenseName">Expense Name</label>
                        <input type="text" class="form-control" id="expenseName" name="ExpenseName" placeholder="Enter expense name" required />
                    </div>
                    
                    <div class="form-group">
                        <label for="amount">Amount</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">$</span>
                            </div>
                            <input type="number" step="0.01" min="0.01" class="form-control" id="amount" name="Amount" placeholder="0.00" required />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="sharedWith">Shared With</label>
                        <input type="text" class="form-control" id="sharedWith" name="SharedWith" placeholder="Enter names (comma-separated)" required />
                    </div>
                    
                    <input type="hidden" id="date" name="Date" value="@DateTime.Now" />
                    
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                </form>
            </div>

            <!-- Expense Table -->
            <div class="table-container">
                <table class="table" id="expenseTable">
                    <thead>
                        <tr>
                            <th>Expense Name</th>
                            <th>Amount</th>
                            <th>Shared With</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="expenseTableBody">
                        @if (!expenses.Any())
                        {
                            <tr id="noExpensesMessage">
                                <td colspan="5" class="text-center">No expenses yet...</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var expense in expenses)
                            {
                                <tr>
                                    <td>@expense.ExpenseName</td>
                                    <td>@expense.Amount.ToString("C")</td>
                                    <td>@expense.SharedWith</td>
                                    <td>@expense.Date.ToString("MM/dd/yyyy")</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" data-toggle="modal" 
                                            data-target="#deleteConfirmationModal" 
                                            onclick="setExpenseToDelete('@expense.ExpenseName', '@expense.Id')">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="expenses-sidebar">
            <div class="stats-title">
                
            </div>
            <div id="expenseChart"></div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete expense "<strong id="expenseToDeleteName"></strong>"?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="DeleteExpense">
                    <input type="hidden" name="expenseId" id="expenseToDeleteId" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="module">
        import { createRoot } from 'react-dom/client';
        import ExpenseChart from './js/components/ExpenseChart';
        
        const container = document.getElementById('expenseChart');
        const root = createRoot(container);
        root.render(<ExpenseChart />);
    </script>

    <script>
        window.onload = function() {
            setDateToNow();
        }

        // Set the date used in the database to the current LOCAL users time
        function setDateToNow() {
            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            const seconds = now.getSeconds().toString().padStart(2, '0');
            
            const localDateTime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
            document.getElementById('date').value = localDateTime;
        }

        // Used for confirmation pop-up Bootstrap Modal
        function setExpenseToDelete(expenseName, expenseId) {
            document.getElementById('expenseToDeleteName').innerText = expenseName;
            document.getElementById('expenseToDeleteId').value = expenseId;
        }
        
        // Format currency dynamically based on user's locale
        document.addEventListener("DOMContentLoaded", function() {
            document.querySelectorAll(".amount-cell").forEach(function(cell) {
                const amount = parseFloat(cell.getAttribute("data-amount"));
                if (!isNaN(amount)) {
                    cell.innerText = new Intl.NumberFormat(navigator.language, { style: "currency", currency: "USD" }).format(amount);
                }
            });
        });

        // Validate Amount field to ensure it has only up to two decimal places
        document.getElementById("amount").addEventListener("input", function (event) {
            const value = event.target.value;
            const decimalPattern = /^\d+(\.\d{0,2})?$/;
            if (!decimalPattern.test(value)) {
                // Remove extra decimal places if present
                event.target.value = parseFloat(value).toFixed(2);
            }
        });
    </script>
}