@model Tuple<List<DormBuddy.Models.PeerLendingModel>, DormBuddy.Models.PeerLendingModel>

@{
    ViewData["Title"] = "Peer Lending";
    var loans = Model?.Item1 ?? new List<DormBuddy.Models.PeerLendingModel>();
    var newLoan = Model?.Item2 ?? new DormBuddy.Models.PeerLendingModel();
}

<div class="lending-container fade-in">
   
    <!-- Header Section -->
    <div class="lending-header text-center mb-4">
        <h1><i class="fas fa-handshake"></i></h1>
        <h1 class="display-4">Peer Lending</h1>
        <p>Manage peer-to-peer loans and track repayment status.</p>
    </div>

    <div class="stats-row">
        <div class="stat-card">
            <div class="stat-icon" style="background: #4e95d1;">
                <i class="fas fa-money-bill-wave"></i>
            </div>
            <div class="stat-info">
                <h3>@(((decimal?)ViewData["TotalLent"] ?? 0m).ToString("C"))</h3>
                <p>Total Lent</p>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon" style="background: #4caf50;">
                <i class="fas fa-handshake"></i>
            </div>
            <div class="stat-info">
                <h3>@(ViewData["ActiveLoans"] ?? 0)</h3>
                <p>Active Loans</p>
            </div>
        </div>

        <div class="stat-card stat-pending">
                <div class="stat-icon"  style="background: #f44336;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-info">
                    <h3>@(ViewData["pendingLoanPayments"] ?? 0)</h3>
                <p>Total Unpaid</p>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon" style="background: #ff9800;">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-info">
                <h3>@(ViewData["DueSoonLoans"] ?? 0)</h3>
                <p>Due Soon</p>
            </div>
        </div>
    </div>

    <!-- Messages Section -->
    @if (TempData["message"] != null)
    {
        <div class="alert alert-success">
            @Html.Raw(TempData["message"])
        </div>
    }
    @if (TempData["error"] != null)
    {
        <div class="alert alert-danger">
            @Html.Raw(TempData["error"])
        </div>
    }
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                @error.ErrorMessage<br />
            }
        </div>
    }

    <!-- Add Loan Form -->
    <div class="add-loan-section">
        <h4>Add New Loan</h4>
        <form method="post" asp-action="AddLoan" asp-controller="PeerLending">
            <input type="hidden" id="UserId" name="UserId" value="@newLoan.UserId" />
            
            <div class="form-group">
                <label for="borrowerId">Select Borrower</label>
                <div id="borrowerSelection">
                    @if (ViewBag.GroupMembers != null && ViewBag.Users != null && ((List<DormBuddy.Models.GroupMemberModel>)ViewBag.GroupMembers).Any())
                    {
                        var groupMembers = (List<DormBuddy.Models.GroupMemberModel>)ViewBag.GroupMembers;
                        var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;
                        var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

                        foreach (var member in groupMembers)
                        {
                            var user = users.FirstOrDefault(u => u.Id == member.UserId);
                            if (user != null && user.Id != currentUserId)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="BorrowerId" id="borrower_@user.Id" value="@user.Id" required />
                                    <label class="form-check-label" for="borrower_@user.Id">
                                        @($"{user.FirstName} {user.LastName}")
                                    </label>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <strong>Notice:</strong> You are not part of any group. Please <a href="/Groups/Index">join or create</a> a group to use this feature.
                        </div>
                    }
                </div>
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    <input type="number" step="0.01" min="0.01" class="form-control" id="amount" name="Amount" placeholder="0.00" required />
                </div>
            </div>
            <div class="form-group">
                <label for="dueDate">Due Date</label>
                <input type="date" class="form-control" id="dueDate" name="DueDate" required />
            </div>
            <div class="form-group">
                <label for="dueTime">Due Time</label>
                <div class="time-select-group">
                    <select class="form-control" name="DueTimeHour">
                        @for (int i = 1; i <= 12; i++) { <option>@i</option> }
                    </select>
                    <select class="form-control" name="DueTimeMinute">
                        @for (int i = 0; i < 60; i += 5) { <option>@i.ToString("D2")</option> }
                    </select>
                    <select class="form-control" name="DueTimeAMPM">
                        <option>AM</option>
                        <option>PM</option>
                    </select>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Add Loan</button>
        </form>
    </div>

    <!-- Loans Table -->
    <div class="table-container">
        <table class="table" id="taskTable">
            <thead>
                <tr>
                    <th>Lender</th>
                    <th>Borrower</th>
                    <th>Amount</th>
                    <th>Due Date</th>
                    <th>Repaid?</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!loans.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center">No current loans...</td>
                    </tr>
                }
                else
                {
                    foreach (var loan in loans)
                    {
                        <tr>
                            <td>
                                @{
                                    if (ViewBag.Users != null)
                                    {
                                        var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;
                                        var assignedIds = loan.UserId?.Split(',') ?? Array.Empty<string>();
                                        var assignedNames = users
                                            .Where(u => assignedIds.Contains(u.Id))
                                            .Select(u => $"{u.FirstName} {u.LastName}");

                                        <span>@string.Join(", ", assignedNames)</span>
                                    }
                                    else
                                    {
                                        <span>Unknown</span>
                                    }
                                }
                            </td>
                            <td>
                                @{
                                    if (ViewBag.Users != null)
                                    {
                                        var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;
                                        var assignedIds = loan.BorrowerId?.Split(',') ?? Array.Empty<string>();
                                        var assignedNames = users
                                            .Where(u => assignedIds.Contains(u.Id))
                                            .Select(u => $"{u.FirstName} {u.LastName}");

                                        <span>@string.Join(", ", assignedNames)</span>
                                    }
                                    else
                                    {
                                        <span>Unknown</span>
                                    }
                                }
                            </td>
                            <td class="amount-cell" data-amount="@loan.Amount">@loan.Amount</td>
                            <td>@loan.DueDate.ToString("MM/dd/yyyy hh:mm tt")</td>
                            <td class="text-center">
                                <span class="badge @(loan.IsRepaid ? "bg-success" : "bg-danger")">
                                    <i class="fa @(loan.IsRepaid ? "fa-check" : "fa-times")"></i>
                                </span>
                            </td>
                            <td>
                                <button class="btn @(loan.IsRepaid ? "btn-warning" : "btn-success") btn-sm"
                                    onclick="toggleLoanStatus(this, @loan.Id)">
                                    Toggle Status
                                </button>
                                <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteConfirmationModal" 
                                    onclick="setLoanToDelete('@loan.Id')">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this loan?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="DeleteLoan">
                    <input type="hidden" name="loanId" id="loanToDeleteId" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Loading Animation -->
<div id="loadingSpinner" class="loading-spinner" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<!-- CSS for the Loading Animation -->
<style>
    .loading-spinner {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(161, 161, 161, 0.397);
        width: 100%;
        height: 100%;
    }
</style>

@section Scripts {
    <script>
        window.onload = function() {
            setDateTimeToNow();
        }

        function setDateTimeToNow() {
            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const localDate = `${year}-${month}-${day}`;
            document.getElementById('dueDate').value = localDate;

            let hour = now.getHours();
            let minute = now.getMinutes();
            minute = Math.ceil(minute / 5) * 5;
            if (minute === 60) {
                minute = 0;
                hour += 1;
            }

            document.querySelector('select[name="DueTimeHour"]').value = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;
            document.querySelector('select[name="DueTimeMinute"]').value = minute.toString().padStart(2, '0');
            document.querySelector('select[name="DueTimeAMPM"]').value = hour >= 12 ? 'PM' : 'AM';
        }

        // Show loading spinner
        function showLoadingSpinner() {
            document.getElementById('loadingSpinner').style.display = 'flex';
        }

        // Hide loading spinner
        function hideLoadingSpinner() {
            document.getElementById('loadingSpinner').style.display = 'none';
        }

        function toggleLoanStatus(button, loanId) {
            
            showLoadingSpinner();
            
            $.ajax({
                url: '/PeerLending/ToggleStatus',
                type: 'POST',
                data: { loanId: loanId },
                success: function(response) {
                    if (response.success) {
                        const row = button.closest('tr');
                        const statusCell = row.querySelector('.text-center span.badge');
                        const isRepaid = statusCell.classList.contains('bg-success');

                        if (isRepaid) {
                            statusCell.classList.remove('bg-success');
                            statusCell.classList.add('bg-danger');
                            statusCell.innerHTML = '<i class="fa fa-times"></i>';
                            button.classList.remove('btn-warning');
                            button.classList.add('btn-success');
                        } else {
                            statusCell.classList.remove('bg-danger');
                            statusCell.classList.add('bg-success');
                            statusCell.innerHTML = '<i class="fa fa-check"></i>';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-warning');
                        }
                        
                        loadLendingStats();

                    } else {
                        alert(response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    alert('An error occurred while updating the loan status.');
                    hideLoadingSpinner();
                }
            });
        }
        
        function loadLendingStats() {
            $.ajax({
                url: '/PeerLending/GetLendingStats',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        const stats = response.stats;
                        $(".stat-card").each(function () {
                            const label = $(this).find("p").text().trim();
                            switch (label) {
                                case "Total Lent":
                                    $(this).find("h3").text(stats.totalLent);
                                    break;
                                case "Active Loans":
                                    $(this).find("h3").text(stats.activeLoans);
                                    break;
                                case "Total Unpaid":
                                    $(this).find("h3").text(stats.pendingLoanPayments);
                                    break;
                                case "Due Soon":
                                    $(this).find("h3").text(stats.dueSoonLoans);
                                    break;
                            }
                        });
                    } else {
                        console.error("Failed to load lending stats:", response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching lending stats:", error);
                    hideLoadingSpinner();
                },
                complete: function () {
                    hideLoadingSpinner();
                }
            });
        }

        function setLoanToDelete(loanId) {
            document.getElementById('loanToDeleteId').value = loanId;
        }

        // Format currency dynamically based on the user's locale
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".amount-cell").forEach(function (cell) {
                const amount = parseFloat(cell.getAttribute("data-amount"));
                if (!isNaN(amount)) {
                    cell.innerText = new Intl.NumberFormat(navigator.language, {
                        style: "currency",
                        currency: "USD"
                    }).format(amount);
                }
            });
        });

        document.getElementById("amount").addEventListener("input", function (event) {
            const value = event.target.value;
            const decimalPattern = /^\d+(\.\d{0,2})?$/;
            if (!decimalPattern.test(value)) {
                event.target.value = parseFloat(value).toFixed(2);
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#deleteConfirmationModal').on('show.bs.modal', function () {
                $(this).appendTo('body');
            });
        });
    </script>
}
