<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Account Settings</title>
</head>
<body>

@if (User?.Identity != null && User?.Identity.IsAuthenticated != null) {

    string firstName = User.FindFirst("FirstName")?.Value ?? "";
    string lastName = User.FindFirst("LastName")?.Value ?? "";
    string email = User.FindFirst("Email")?.Value ?? "";

    <div>
        <h2>Account Settings</h2>

        <label for="email">Current Email</label>
        <input id="emailchange" type="email" class="form-control" value="@email" />

        
        <label for="username">Current Username</label>
        <input id="usernamechange" type="text" class="form-control" value="@User.Identity.Name" />

        <label for="firstname">Current First Name</label>
        <input id="firstnamechange" type="text" class="form-control" value="@firstName" />

        <label for="lastname">Current Last Name</label>
        <input id="lastnamechange" type="text" class="form-control" value="@lastName" />

        <label for="password">Old Password</label>
        <input id="passwordchange_old" type="password" class="form-control" />

        <label for="emailchange">New Password</label>
        <input id="emailchange_new" type="password" class="form-control" />

        <label for="emailchange">Re-Enter Password</label>
        <input id="emailchange_new_retyped" type="password" class="form-control" />

        <!-- Two-Factor Authentication Setting -->
        <label for="twofactor">Two-Factor Authentication</label>
        <select id="twofactor" class="form-control" onchange="toggleMobileAuthSection()">
            <option value="disabled">Disabled</option>
            <option value="enabled">Enabled</option>
        </select>

        <!-- Mobile Authentication -->
        <div id="mobile-auth-section" style="display: none;">
            <h3>Mobile Authentication</h3>
            <div>
                <label for="country-code">Country Code</label>
                <select id="country-code" class="form-control">
                    <option value="+1">+1 (USA)</option>
                    <option value="+44">+44 (UK)</option>
                    <option value="+91">+91 (India)</option>
                    <!-- Add more country codes as needed -->
                </select>
                <!-- Phone Number Input -->
                <label for="phone-number">Phone Number</label>
                <input type="tel" id="phone-number" class="form-control" placeholder="Enter phone number" />
            </div>

            <!-- reCAPTCHA -->
            <div id="recaptcha-container"></div> <!-- This is where the reCAPTCHA will be rendered -->

            <!-- Send Code Button -->
            <button id="send-code-btn">Send Verification Code</button>

            <!-- Input for Verification Code -->
            <div id="code-verification-section" style="display:none;">
                <label for="verification-code">Enter Verification Code</label>
                <input type="text" id="verification-code" class="form-control" placeholder="Enter code" />
                <button id="verify-code-btn" onclick="verifyCode()">Verify Code</button>
            </div>

            <!-- Verification Status -->
            <div id="verification-status"></div>
        </div>

        <input id="deleteaccount" type="submit" class="form-control" value="Remove Account Permanently" style="margin-top: 50px; background-color: red; color: white;" />
    </div>

}

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-app.js";
    import { getAuth, signInWithPhoneNumber, RecaptchaVerifier } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-auth.js";

    const firebaseConfig = {
        apiKey: "AIzaSyDjifg3IPrpo2cqjG1s8s72lhmXXKB1gng",
        authDomain: "dormbuddy-33ce0.firebaseapp.com",
        projectId: "dormbuddy-33ce0",
        storageBucket: "dormbuddy-33ce0.appspot.com",
        messagingSenderId: "890087100030",
        appId: "1:890087100030:web:fc0dc67ff5f0517de8d22f",
        measurementId: "G-XN11GF25LY"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app); // Initialize Firebase Authentication

    // Initialize reCAPTCHA verifier
    let recaptchaVerifier;

    // Ensure DOM is fully loaded before initializing reCAPTCHA
    window.onload = function () {
        console.log('Window loaded. Setting up reCAPTCHA.');
        createRecaptchaVerifier();
    };

    // Function to create the reCAPTCHA verifier
    function createRecaptchaVerifier() {
        recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', {
            'size': 'normal',
            'callback': function (response) {
                console.log("reCAPTCHA solved:", response);
            },
            'expired-callback': function () {
                console.log("reCAPTCHA expired. Re-rendering...");
                recaptchaVerifier.render(); // Re-render reCAPTCHA on expiration
            }
        }, auth);
        
        recaptchaVerifier.render().then((widgetId) => {
            console.log("reCAPTCHA rendered with widgetId:", widgetId);
        }).catch((error) => {
            console.error("Error rendering reCAPTCHA:", error);
        });
    }

    // Function to toggle the mobile authentication section
    function toggleMobileAuthSection() {
        const twoFactorSelect = document.getElementById('twofactor');
        const mobileAuthSection = document.getElementById('mobile-auth-section');

        if (twoFactorSelect.value === 'enabled') {
            mobileAuthSection.style.display = 'block';
            // Check if reCAPTCHA has been created before using it
            if (!recaptchaVerifier) {
                createRecaptchaVerifier(); // Recreate if not already created
            }
        } else {
            mobileAuthSection.style.display = 'none';
            // Optional: Reset the reCAPTCHA if not needed
            if (recaptchaVerifier) {
                recaptchaVerifier.reset(); // Reset reCAPTCHA
            }
        }
    }

    window.toggleMobileAuthSection = toggleMobileAuthSection;

    // Function to send the verification code
    document.getElementById('send-code-btn').onclick = function sendVerificationCode() {
        const countryCode = document.getElementById('country-code').value;
        const phoneNumber = document.getElementById('phone-number').value;
        const fullNumber = countryCode + phoneNumber;

        console.log("Full phone number:", fullNumber);

        // Ensure reCAPTCHA is fully rendered before proceeding
        if (recaptchaVerifier) {
            signInWithPhoneNumber(auth, fullNumber, recaptchaVerifier)
                .then((confirmationResult) => {
                    window.confirmationResult = confirmationResult;
                    document.getElementById('code-verification-section').style.display = 'block';
                    console.log('Verification code sent successfully.');
                })
                .catch((error) => {
                    console.error('Error during phone verification:', error);
                });
        } else {
            console.error("reCAPTCHA not initialized");
        }
    };

    // Function to verify the entered code
    function verifyCode() {
        const verificationCode = document.getElementById('verification-code').value;
        window.confirmationResult.confirm(verificationCode).then((result) => {
            const user = result.user;
            console.log('Phone verification successful. User:', user);
            document.getElementById('verification-status').innerText = 'Phone verified successfully!';
        }).catch((error) => {
            console.error('Error verifying code:', error);
            document.getElementById('verification-status').innerText = 'Verification failed. Please try again.';
        });
    }
</script>

</body>
</html>
