@{
    ViewData["Title"] = "Task Management";
}

<!-- Return to Dashboard Button -->
<div class="mb-4">
    <a href="/Account/Dashboard" class="btn btn-outline-primary">
        <i class="fa fa-chevron-left"></i> Return to Dashboard
    </a>
</div>

<div class="text-center mb-4">
    <h1 class="display-4">Task Management</h1>
    <p>Manage your dorm-related tasks and track progress.</p>
</div>

<!-- Task Form to Add New Task -->
<div class="container mb-4">
    <h4>Add New Task</h4>
    <form id="addTaskForm">
        <div class="form-group">
            <label for="taskName">Task Name</label>
            <input type="text" class="form-control" id="taskName" placeholder="Enter task name" required />
        </div>
        <div class="form-group">
            <label for="assignedTo">Assigned To</label>
            <input type="text" class="form-control" id="assignedTo" placeholder="Enter name" required />
        </div>
        <div class="form-group">
            <label for="dueDate">Due Date</label>
            <input type="date" class="form-control" id="dueDate" required />
        </div>
        <div class="form-group">
            <label for="dueTime">Due Time</label>
            <div class="d-flex">
                <select class="form-control mr-2" id="hour">
                    <!-- Dropdown for hours -->
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option>@i</option>
                    }
                </select>
                <select class="form-control mr-2" id="minute">
                    <!-- Dropdown for minutes -->
                    @for (int i = 0; i < 60; i += 5) { <option>@i.ToString("D2")</option> }
                </select>
                <select class="form-control" id="ampm">
                    <option>AM</option>
                    <option>PM</option>
                </select>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Add Task</button>
    </form>
</div>

<!-- Task Table -->
<div class="container">
    <div class="table-responsive">
        <table class="table table-striped table-bordered" id="taskTable">
            <thead class="thead-dark">
                <tr>
                    <th>Task Name</th>
                    <th>Assigned To</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="taskTableBody">
                <tr id="noTasksMessage">
                    <td colspan="5" class="text-center">No remaining tasks...</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('addTaskForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent form from submitting and reloading page

            // Get input values
            const taskName = document.getElementById('taskName').value;
            const assignedTo = document.getElementById('assignedTo').value;
            const dueDate = document.getElementById('dueDate').value;
            const hour = document.getElementById('hour').value;
            const minute = document.getElementById('minute').value;
            const ampm = document.getElementById('ampm').value;

            // Format the date and time as mm/dd/yyyy hh:mm AM/PM
            const formattedDueDate = formatDateTime(dueDate, hour, minute, ampm);

            // Remove "No remaining tasks..." message if it exists
            const noTasksMessage = document.getElementById('noTasksMessage');
            if (noTasksMessage) {
                noTasksMessage.remove();
            }

            // Create a new row in the task table
            const tableBody = document.getElementById('taskTableBody');
            const newRow = tableBody.insertRow();

            // Insert cells in the new row
            const taskNameCell = newRow.insertCell(0);
            const assignedToCell = newRow.insertCell(1);
            const dueDateCell = newRow.insertCell(2);
            const statusCell = newRow.insertCell(3);
            const actionsCell = newRow.insertCell(4);

            // Add the values to the cells
            taskNameCell.innerText = taskName;
            assignedToCell.innerText = assignedTo;
            dueDateCell.innerText = formattedDueDate;
            statusCell.innerHTML = '<span class="badge bg-warning text-dark">In Progress</span>';

            // Add buttons for actions (Mark as Completed, Delete)
            actionsCell.innerHTML = `
                <button class="btn btn-success btn-sm" onclick="toggleTaskStatus(this)">Mark as Completed</button>
                <button class="btn btn-danger btn-sm" onclick="deleteTask(this)">Delete</button>
            `;

            // Clear the form inputs after task is added
            document.getElementById('addTaskForm').reset();
        });

        // Function to format the date and time as mm/dd/yyyy hh:mm AM/PM
        function formatDateTime(date, hour, minute, ampm) {
            const [year, month, day] = date.split('-');
            return `${month}/${day}/${year} ${hour}:${minute} ${ampm}`;
        }

        // Function to toggle between task statuses
        function toggleTaskStatus(button) {
            const row = button.closest('tr');
            const statusCell = row.cells[3]; // Status is in the 4th column

            // If task is in progress, mark it as completed, else mark as in-progress
            if (statusCell.innerText === 'In Progress') {
                statusCell.innerHTML = '<span class="badge bg-success">Completed</span>';
                button.classList.remove('btn-success');
                button.classList.add('btn-warning');
                button.innerText = 'Mark as In-Progress';
            } else {
                statusCell.innerHTML = '<span class="badge bg-warning text-dark">In Progress</span>';
                button.classList.remove('btn-warning');
                button.classList.add('btn-success');
                button.innerText = 'Mark as Completed';
            }
        }

        // Function to delete a task
        function deleteTask(button) {
            const row = button.closest('tr');
            row.remove(); // Remove the row from the table

            // If no tasks are left, show "No remaining tasks..." message
            const tableBody = document.getElementById('taskTableBody');
            if (tableBody.rows.length === 0) {
                const noTasksRow = tableBody.insertRow();
                noTasksRow.id = "noTasksMessage";
                const noTasksCell = noTasksRow.insertCell(0);
                noTasksCell.colSpan = 5;
                noTasksCell.classList.add('text-center');
                noTasksCell.innerText = "No remaining tasks...";
            }
        }
    </script>
}
