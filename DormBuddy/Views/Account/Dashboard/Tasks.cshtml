@model Tuple<List<DormBuddy.Models.TaskModel>, DormBuddy.Models.TaskModel>

@{
    ViewData["Title"] = "Task Management";
    var tasks = Model.Item1;
    var newTask = Model.Item2;
    
    // Calculate stats
    var totalTasks = tasks.Count;
    var incompleteTasks = tasks.Count(t => !t.IsCompleted);
    var overdueTasks = tasks.Count(t => !t.IsCompleted && t.DueDate < DateTime.Now);
    var dueTodayTasks = tasks.Count(t => !t.IsCompleted && t.DueDate.Date == DateTime.Today);
}
<div class="tasks-container fade-in">
    
    <div class="tasks-header text-center mb-4">
        <h1><i class="fas fa-tasks"></i></h1>
        <h1 class="display-4">Task Management</h1>
        <p>Manage your dorm-related tasks and track progress.</p>
    </div>
    <!-- Stats Cards -->
    <div class="stats-container">
        <div class="stat-card stat-all">
            <div class="stat-icon">
                <i class="fas fa-tasks"></i>
            </div>
            <div class="stat-content">
                <h3 class="stat-number">@totalTasks</h3>
                <p class="stat-label">All Tasks</p>
            </div>
        </div>

        <div class="stat-card stat-incomplete">
            <div class="stat-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <div class="stat-content">
                <h3 class="stat-number">@incompleteTasks</h3>
                <p class="stat-label">Incomplete</p>
            </div>
        </div>


        <div class="stat-card stat-overdue">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <h3 class="stat-number">@overdueTasks</h3>
                <p class="stat-label">Overdue</p>
            </div>
        </div>


        <div class="stat-card stat-due-today">
            <div class="stat-icon">
                <i class="fas fa-bell"></i>
            </div>
            <div class="stat-content">
                <h3 class="stat-number">@dueTodayTasks</h3>
                <p class="stat-label">Due Today</p>
            </div>
        </div>
</div>
        
    
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }

    <!-- Add Task Form -->
    <div class="add-task-section">
        <h4>Add New Task</h4>
        <form method="post" asp-action="AddTask">
            <input type="hidden" id="UserId" name="UserId" value="@newTask.UserId" />
            
            <div class="form-group">
                <label for="taskName">Task Name</label>
                <input type="text" class="form-control" id="taskName" name="TaskName" placeholder="Enter task name" required />
            </div>
            
            <div class="form-group">
                <label for="assignedTo">Assigned To</label>
                <div id="assignedTo">
                    @if (ViewBag.GroupMembers != null && ViewBag.Users != null && ((List<DormBuddy.Models.GroupMemberModel>)ViewBag.GroupMembers).Any())
                    {
                        var groupMembers = (List<DormBuddy.Models.GroupMemberModel>)ViewBag.GroupMembers;
                        var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;

                        foreach (var member in groupMembers)
                        {
                            var user = users.FirstOrDefault(u => u.Id == member.UserId);
                            if (user != null)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="AssignedUserIds" id="user_@user.Id" value="@user.Id" />
                                    <label class="form-check-label" for="user_@user.Id">@($"{user.FirstName} {user.LastName}")</label>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <strong>Notice:</strong> You are not part of any group. Please <a href="/Groups/Index">join or create</a> a group to use this feature.
                        </div>
                    }
                </div>
            </div>
            
            <div class="form-group">
                <label for="dueDate">Due Date</label>
                <input type="date" class="form-control" id="dueDate" name="DueDate" required />
            </div>
            
            <div class="form-group">
                <label for="dueTime">Due Time</label>
                <div class="time-select-group">
                    <select class="form-control" name="DueTimeHour">
                        @for (int i = 1; i <= 12; i++)
                        {
                            <option>@i</option>
                        }
                    </select>
                    <select class="form-control" name="DueTimeMinute">
                        @for (int i = 0; i < 60; i += 5)
                        {
                            <option>@i.ToString("D2")</option>
                        }
                    </select>
                    <select class="form-control" name="DueTimeAMPM">
                        <option>AM</option>
                        <option>PM</option>
                    </select>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Add Task</button>
        </form>
    </div>

        <!-- Tasks Table -->
    <div class="table-container">
        <table class="table" id="taskTable">
            <thead>
                <tr>
                    <th>Task Name</th>
                    <th>Assigned To</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="taskTableBody">
                @if (tasks.Any())
                {
                    foreach (var task in tasks)
                    {
                        <tr>
                            <td>@task.TaskName</td>
                            <td>
                                @{
                                    if (ViewBag.Users != null)
                                    {
                                        var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;
                                        var assignedIds = task.AssignedTo?.Split(',') ?? Array.Empty<string>();
                                        var assignedNames = users
                                            .Where(u => assignedIds.Contains(u.Id))
                                            .Select(u => $"{u.FirstName} {u.LastName}");

                                        <span>@string.Join(", ", assignedNames)</span>
                                    }
                                    else
                                    {
                                        <span>Unknown</span>
                                    }
                                }
                            </td>
                            <td>@task.DueDate.ToString("MM/dd/yyyy hh:mm tt")</td>
                            <td class="text-center">
                                <span class="badge @(task.IsCompleted ? "bg-success" : "bg-danger")">
                                    <i class="fa @(task.IsCompleted ? "fa-check" : "fa-times")" aria-hidden="true"></i>
                                </span>
                            </td>
                            <td>
                                <button class="btn @(task.IsCompleted ? "btn-warning" : "btn-success") btn-sm"
                                    onclick="toggleTaskStatus(this, @task.Id)">
                                    Toggle Status
                                </button>
                                <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteConfirmationModal" 
                                    onclick="setTaskToDelete('@task.TaskName', '@task.Id')">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No tasks found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" 
     aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete task "<strong id="taskToDeleteName"></strong>"?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="DeleteTask">
                    <input type="hidden" name="taskId" id="taskToDeleteId" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        window.onload = function() {
            setDateTimeToNow();
        }

        function setDateTimeToNow() {
            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const localDate = `${year}-${month}-${day}`;
            document.getElementById('dueDate').value = localDate;
            
            let hour = now.getHours();
            let minute = now.getMinutes();
            minute = Math.ceil(minute / 5) * 5;
            if (minute === 60) {
                minute = 0;
                hour += 1;
            }

            document.querySelector('select[name="DueTimeHour"]').value = 
                hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;
            document.querySelector('select[name="DueTimeMinute"]').value = 
                minute.toString().padStart(2, '0');
            document.querySelector('select[name="DueTimeAMPM"]').value = 
                hour >= 12 ? 'PM' : 'AM';
        }

        function setTaskToDelete(taskName, taskId) {
            document.getElementById('taskToDeleteName').innerText = taskName;
            document.getElementById('taskToDeleteId').value = taskId;
        }

        function toggleTaskStatus(button, taskId) {
            const row = button.closest('tr');
            const statusCell = row.cells[3];
            const isCompleted = statusCell.querySelector('i').classList.contains('fa-check');

            $.ajax({
                url: '/Tasks/ToggleStatus',
                type: 'POST',
                data: { taskId: taskId },
                success: function(response) {
                    if (response.success) {
                        if (isCompleted) {
                            statusCell.innerHTML = '<span class="badge bg-danger"><i class="fa fa-times" aria-hidden="true"></i></span>';
                            button.classList.remove('btn-warning');
                            button.classList.add('btn-success');
                        } else {
                            statusCell.innerHTML = '<span class="badge bg-success"><i class="fa fa-check" aria-hidden="true"></i></span>';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-warning');
                        }
                    } else {
                        alert('Failed to update task status: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', status, error);
                    alert('Error while updating task status.');
                }
            });
        }
    </script>
}