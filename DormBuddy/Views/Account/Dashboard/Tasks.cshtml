@model Tuple<List<DormBuddy.Models.TaskModel>, DormBuddy.Models.TaskModel>

@{
    ViewData["Title"] = "Task Management";
    var tasks = Model.Item1;
    var newTask = Model.Item2;
    var tasks = Model.Item1;
    var newTask = Model.Item2;
}

<!-- Status toggle icons styling -->
<style>
    .badge.bg-success {
        background-color: #28a745;
        padding: 5px;
        font-size: 0.9em;
    }

    .badge.bg-danger {
        background-color: #dc3545;
        font-size: 1.05em;
    }
</style>




<!-- Return to Dashboard Button -->
<div class="mb-4">
    <a href="/Account/Dashboard" class="btn btn-outline-primary">
        <i class="fa fa-chevron-left"></i> Return to Dashboard
    </a>
</div>

<!-- Tasks Header -->
<div class="text-center mb-4">
    <h1><i class="fas fa-tasks fa-lg"></i></h1>
    <h1 class="display-4">Task Management</h1>
    <p>Manage your dorm-related tasks and track progress.</p>
</div>

<!-- Display success message if it exists -->
@if (TempData["message"] != null)
{
    <div class="alert alert-success">
        @TempData["message"]
    </div>
}

<!-- Display error message if it exists -->
@if (TempData["error"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["error"]
    </div>
}

<!-- Display validation errors -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

<!-- Display success message if it exists -->
@if (TempData["message"] != null)
{
    <div class="alert alert-success">
        @TempData["message"]
    </div>
}
<!-- Display validation errors -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

<!-- Task Form to Add New Task -->
<div class="container mb-4">
    <h4>Add New Task</h4>
    <form method="post" asp-action="AddTask">
        
        <input type="hidden" id="UserId" name="UserId" value="@newTask.UserId" />
        
    <form method="post" asp-action="AddTask">
        
        <input type="hidden" id="UserId" name="UserId" value="@newTask.UserId" />
        
        <div class="form-group">
            <label for="taskName">Task Name</label>
            <input type="text" class="form-control" id="taskName" name="TaskName" placeholder="Enter task name" required />
            <input type="text" class="form-control" id="taskName" name="TaskName" placeholder="Enter task name" required />
        </div>
        <div class="form-group">
            <label for="assignedTo">Assigned To</label>
            <input type="text" class="form-control" id="assignedTo" name="AssignedTo" placeholder="Enter name" required />
        </div>
        <div class="form-group">
            <label for="dueDate">Due Date</label>
            <input type="date" class="form-control" id="dueDate" name="DueDate" required />
            <input type="date" class="form-control" id="dueDate" name="DueDate" required />
        </div>
        <div class="form-group">
            <label for="dueTime">Due Time</label>
            <div class="d-flex">
                <select class="form-control mr-2" name="DueTimeHour">
                <select class="form-control mr-2" name="DueTimeHour">
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option>@i</option>
                    }
                </select>
                <select class="form-control mr-2" name="DueTimeMinute">
                    @for (int i = 0; i < 60; i += 5) { <option>@i.ToString("D2")</option> }
                </select>
                <select class="form-control" name="DueTimeAMPM">
                <select class="form-control" name="DueTimeAMPM">
                    <option>AM</option>
                    <option>PM</option>
                </select>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Add Task</button>
    </form>
</div>

<!-- Task Table -->
<div class="table-responsive">
    <table class="table table-striped table-bordered" id="taskTable">
        <thead class="thead-dark">
            <tr>
                <th>Task Name</th>
                <th>Assigned To</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="taskTableBody">
            @if (!tasks.Any())
            {
<div class="table-responsive">
    <table class="table table-striped table-bordered" id="taskTable">
        <thead class="thead-dark">
            <tr>
                <th>Task Name</th>
                <th>Assigned To</th>
                <th>Due Date</th>
                <th>Complete?</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="taskTableBody">
            @if (!tasks.Any())
            {
                <tr id="noTasksMessage">
                    <td colspan="5" class="text-center">No remaining tasks...</td>
                </tr>
            }
            else
            {
                foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.TaskName</td>
                        <td>@task.AssignedTo</td>
                        <td>@task.DueDate.ToString("MM/dd/yyyy hh:mm tt")</td>
                        <td>
                            <span class="badge @(task.IsCompleted ? "bg-success" : "bg-warning text-dark")">
                                @(task.IsCompleted ? "Completed" : "In Progress")
                            </span>
                        </td>
                        <td>
                            <button class="btn @(task.IsCompleted ? "btn-warning" : "btn-success") btn-sm"
                                onclick="toggleTaskStatus(this, @task.Id)">
                                @(task.IsCompleted ? "Mark as In-Progress" : "Mark as Completed")
                            </button>
                            <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteConfirmationModal" 
                                onclick="setTaskToDelete('@task.TaskName', '@task.Id')">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
            }
            else
            {
                foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.TaskName</td>
                        <td>
                            @{
                                if (ViewBag.Users != null)
                                {
                                    var users = (List<DormBuddy.Models.ApplicationUser>)ViewBag.Users;
                                    var assignedIds = task.AssignedTo?.Split(',') ?? Array.Empty<string>();
                                    var assignedNames = users
                                        .Where(u => assignedIds.Contains(u.Id))
                                        .Select(u => $"{u.FirstName} {u.LastName}");

                                    <span>@string.Join(", ", assignedNames)</span>
                                }
                                else
                                {
                                    <span>Unknown</span>
                                }
                            }
                        </td>
                        <td>@task.DueDate.ToString("MM/dd/yyyy hh:mm tt")</td>
                        <td class="text-center">
                            <span class="badge @(task.IsCompleted ? "bg-success" : "bg-danger")">
                                <i class="fa @(task.IsCompleted ? "fa-check" : "fa-times")" aria-hidden="true"></i>
                            </span>
                        </td>
                        <td>
                            <button class="btn @(task.IsCompleted ? "btn-warning" : "btn-success") btn-sm"
                                onclick="toggleTaskStatus(this, @task.Id)">
                                Toggle Status
                            </button>
                            <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteConfirmationModal" 
                                onclick="setTaskToDelete('@task.TaskName', '@task.Id')">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


<!-- Bootstrap Modal for Confirming Task Deletion -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete task "<strong id="taskToDeleteName"></strong>"?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="DeleteTask">
                    <input type="hidden" name="taskId" id="taskToDeleteId" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for Confirming Task Deletion -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this task?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="DeleteTask">
                    <input type="hidden" name="taskId" id="taskToDeleteId" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        window.onload = function() {
            setDateTimeToNow();
        }

        function setDateTimeToNow() {
            const now = new Date();
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const localDate = `${year}-${month}-${day}`;
            document.getElementById('dueDate').value = localDate;
            let hour = now.getHours();
            let minute = now.getMinutes();
            minute = Math.ceil(minute / 5) * 5;
            if (minute === 60) {
                minute = 0;
                hour += 1;
            }

    document.querySelector('select[name="DueTimeHour"]').value = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;
    document.querySelector('select[name="DueTimeMinute"]').value = minute.toString().padStart(2, '0');
    document.querySelector('select[name="DueTimeAMPM"]').value = hour >= 12 ? 'PM' : 'AM';
}

        function setTaskToDelete(taskName, taskId) {
            document.getElementById('taskToDeleteName').innerText = taskName;
            document.getElementById('taskToDeleteId').value = taskId;
        }

        function toggleTaskStatus(button, taskId) {
            console.log("Task ID to toggle: " + taskId);

            const row = button.closest('tr');
            const statusCell = row.cells[3]; // Status is in the 4th column

            // If task is in progress, mark it as completed, else mark as in-progress
            if (statusCell.innerText === 'In Progress') {
                statusCell.innerHTML = '<span class="badge bg-success">Completed</span>';
                button.classList.remove('btn-success');
                button.classList.add('btn-warning');
                button.innerText = 'Mark as In-Progress';
            } else {
                statusCell.innerHTML = '<span class="badge bg-warning text-dark">In Progress</span>';
                button.classList.remove('btn-warning');
                button.classList.add('btn-success');
                button.innerText = 'Mark as Completed';
            }
        }

        // Function to confirm task deletion
        function confirmDeleteTask(button) {
            // Store the row to delete
            taskToDelete = button.closest('tr');
            // Show the confirmation modal
            $('#deleteConfirmationModal').modal('show');
        }

        // Event listener for confirming deletion from the modal
        document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
            if (taskToDelete) {
                taskToDelete.remove(); // Remove the row from the table
                taskToDelete = null; // Reset the taskToDelete variable

                // Check if there are any remaining tasks
                const tableBody = document.getElementById('taskTableBody');
                if (tableBody.rows.length === 0) {
                    const noTasksRow = tableBody.insertRow();
                    noTasksRow.id = "noTasksMessage";
                    const noTasksCell = noTasksRow.insertCell(0);
                    noTasksCell.colSpan = 5;
                    noTasksCell.classList.add('text-center');
                    noTasksCell.innerText = "No remaining tasks...";
                }
            }
            // Hide the modal after deletion
            $('#deleteConfirmationModal').modal('hide');
        });

        // Function to set the current date and time, rounded to the nearest 5-minute increment
        function setDateTimeToNow() {
            const now = new Date();

            // Set current date in the format YYYY-MM-DD
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based
            const day = now.getDate().toString().padStart(2, '0');
            const currentDate = `${year}-${month}-${day}`;
            document.getElementById('dueDate').value = currentDate;

            // Calculate current time and round minutes to the nearest 5
            let hour = now.getHours();
            let minute = Math.ceil(now.getMinutes() / 5) * 5; // Round to the nearest 5 minutes

            // Adjust for cases where rounding minutes goes beyond 60
            if (minute === 60) {
                minute = 0;
                hour += 1;
            }

            // Convert 24-hour format to 12-hour format with AM/PM
            const ampm = hour >= 12 ? 'PM' : 'AM';
            hour = hour % 12 || 12; // Convert 0 or 24 to 12 for 12-hour format

            // Set the default values for hour, minute, and AM/PM
            document.getElementById('hour').value = hour;
            document.getElementById('minute').value = minute.toString().padStart(2, '0');
            document.getElementById('ampm').value = ampm;
            const statusCell = row.cells[3];
            const isCompleted = statusCell.innerText.trim() === 'Completed';
            $.ajax({
                url: '/Tasks/ToggleStatus',
                type: 'POST',
                data: {
                    taskId: taskId
                },
                success: function(response) {
                    console.log(response);
                    if (response.success) {
                        
                        if (!isCompleted) {
                            statusCell.innerHTML = '<span class="badge bg-success">Completed</span>';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-warning');
                            button.innerText = 'Mark as In-Progress';
                        } else {
                            statusCell.innerHTML = '<span class="badge bg-warning text-dark">In Progress</span>';
                            button.classList.remove('btn-warning');
                            button.classList.add('btn-success');
                            button.innerText = 'Mark as Completed';
                        }
                    } else {
                        alert('Failed to update task status: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', status, error);
                    alert('Error while updating task status.');
                }
            });
        }

    </script>
}
